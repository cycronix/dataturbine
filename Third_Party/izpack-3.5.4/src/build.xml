<?xml version="1.0" encoding="iso-8859-1" standalone="yes" ?>

<project name="IzPack" default="all" basedir="..">

<!--

  build.xml first written by Pierre Dittgen (pierre.dittgen@criltelecom.com)
  This file is intended to be used with ant (http://jakarta.apache.org/ant),
  a java/xml makefile utility.

    14.8.2001: (by Pierre Dittgen)
  Creation of the build.xml. It only compile all the src files.

    16.8.2001: (by Pierre Dittgen)
  Added creation of compiler.jar, installer.jar and compilation of the
  panels.

    28.8.2001: (by Pierre Dittgen)
  Added compile.uninstaller and build.uninstaller targets to create the
  uninstaller.jar jar file.

    02.9.2001: (by Julien Ponge)
        Improved compilation options (optimizations, deprecation warnings) and
        changed the build dir to src/build. Fixed the compiling/building of the
        uninstaller.

    12.9.2001: (by Julien Ponge)
        Added creation/compilation of the frontend and its associated jar file.

    22.9.2001: (by Julien Ponge)
        Small fix in the all target that caused an error if the build dir was
        not yet created.

    14.10.2001: (by Julien Ponge)
        Added the XPanel compilation call.

    12.12.2001: (by Julien Ponge)
        Removed the 'clean' dependency for the 'all' target.

    12.02.2002: (by Julien Ponge)
        Moved the 'build' directory out of the src/ scope (usefull for my CVS
        files moving scripts).
        Added a markup to specify IBM Jikes as the compiler (just comment out to
        use another one).

    21.02.2002: (by Paul Wilkinson)
        Added tasks to compiler.compiler and build.compiler to build ant task class.

    02.03.2002: (by Julien Ponge)
        Modified the building of the panels so that the inner classes can be copied
        too.

    18.04.2002: (by Julien Ponge)
        Added the new com.izforge.izpack.util & com.izforge.izpack.util.os
        packages to the installer.jar build process.

    19.04.2002: (by Olexij Tkatchenko & Julien Ponge)
        Added "dist" target for bootstrapped IzPack package creation.

    01.06.2002: (by Julien Ponge)
        Changed the panels building process in order to enable the ShortcutData
        classes to be move in the same directory as the ShortcutPanel classes.

    15.06.2002: (by Julien Ponge)
        Added the ant-generated manifests in the clean target scope.

    03.07.2002: (by Julien Ponge)
        Added a target to generate some javadoc.

    12.01.2003: (by Julien Ponge)
        Separated the installer generation from the dist target so that it is
        much cleaner.

    13.01.2003: (by Julien Ponge)
        Enhanced the clean target.

    27.02.2003: (by Julien Ponge)
        Fixed the UserInputPanel building process to include all the required
        files.

    30.04.2003: (by Jonathan Halliday)
        Change to panel compilation target, for panel automation
        (silent install) support.
        
    05.07.2003: (by Julien Ponge)
        Added a target to fix the files encoding and cr/lf (fix.crlf).
    
    10.09.2003: (by Julien Ponge)
        Reformatting, 4 spaces tabs, got rid of residual hard tabs.
    
    19.09.2003: (by Julien Ponge)
        Added a run.installer target to test an installer.
    
    06.12.2003: (by Julien Ponge)
        Removed the frontend-related sections.

    16.12.2003: (by Julien Ponge)
        Added the SudoPanel building call.
    
    18.02.2004: (by Julien Ponge)
        New installer naming scheme (IzPack-install-{version}.jar).

  Mini-HowTo:

  To compile and package the compiler.jar jar file, type:
    ant build.compiler

  To compile and package the installer.jar jar file, type:
    ant build.installer

  To compile and package the uninstaller.jar jar file, type:
    ant build.uninstaller

  To compile the panels and put them in the bin/panels directory, type:
    ant build.panels

    To compile and package the frontend.jar jar file, type:
        ant build.frontend

  To make all, type:
    ant all
  or
    ant
  (this is the default target)

    To compile and create IzPack distribution package type:
    ant dist

    To delete the classes directory after packaging, just type:
    ant clean
  -->

    <!-- Compiler to use put your own here (jikes, modern, gcj, ...) -->
    <!--<property name="build.compiler" value="jikes" />-->

    <!-- Define directories -->
    <property file="src/ant.properties"/>
    <property name="ver" value="3.5"/>
    <property name="rel" value="4"/>

    <property name="src.dir" value="${basedir}/src/lib"/>
    <property name="img.dir" value="${basedir}/src/img"/>
    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="doc.dir" value="${basedir}/doc"/>

    <property name="langpacks.subdir" value="langpacks"/>
    <property name="langpacks.dir" value="${basedir}/bin/${langpacks.subdir}"/>

    <property name="build.subdir" value="_build"/>
    <property name="build.dir" value="${basedir}/${build.subdir}"/>

    <property name="dist.subdir" value="_dist"/>
    <property name="dist.dir" value="${basedir}/${dist.subdir}"/>
    <property name="dist-files.dir" value="${basedir}/src/dist-files"/>


    <!-- Define file paths -->
    <property name="compiler.jar" value="${basedir}/lib/compiler.jar"/>
    <property name="compiler.manifest" value="${basedir}/src/compiler.manifest"/>
    <property name="standalone-compiler.jar" value="${basedir}/lib/standalone-compiler.jar"/>
    <property name="standalone-compiler.manifest" value="${basedir}/src/standalone-compiler.manifest"/>
    <property name="installer.jar" value="${basedir}/lib/installer.jar"/>
    <property name="installer.manifest" value="${basedir}/src/installer.manifest"/>
    <property name="uninstaller.jar" value="${basedir}/lib/uninstaller.jar"/>
    <property name="uninstaller.manifest" value="${basedir}/src/uninstaller.manifest"/>

    <property name="debug" value="off"/>

    <!-- Checking target -->
    <target name="check">
        <echo message="basedir=${basedir}"/>
        <echo message="dist.dir=${dist.dir}"/>
        <echo message="build.dir=${build.dir}"/>
        <echo message="debug=${debug}"/>
    </target>

    <!-- Creates the classes directory -->
    <target name="prepare">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${basedir}/lib"/>
        <mkdir dir="${dist.dir}"/>
        <tstamp/>
    </target>

    <!-- Compiles the compiler src files -->
    <target name="compile.compiler" depends="prepare">
        <javac srcdir="${src.dir}" destdir="${build.dir}" optimize="on" deprecation="on" debug="${debug}">
            <include name="com/izforge/izpack/*.java"/>
            <include name="com/izforge/izpack/compiler/*.java"/>
            <include name="com/izforge/izpack/ant/*.java"/>
            <include name="com/izforge/izpack/util/Debug.java"/>
            <include name="com/izforge/izpack/util/OsConstraint.java"/>
            <include name="net/n3/nanoxml/*.java"/>
        </javac>
        <copy todir="${build.dir}/com/izforge/izpack/ant/langpacks">
            <fileset dir="${src.dir}/com/izforge/izpack/ant/langpacks"/>
        </copy>
    </target>

    <!-- Package compiler.jar -->
    <target name="compiler.manifest">
        <manifest file="${compiler.manifest}">
            <attribute name="Built-By" value="IzPack"/>
            <attribute name="Class-Path" value="ant.jar"/>
            <attribute name="Main-Class" value="com.izforge.izpack.compiler.Compiler"/>
            <section name="com/izforge/izpack/compiler/">
                <attribute name="Specification-Title" value="IzPack compiler"/>
                <attribute name="Specification-Version" value="${rel}"/>
                <attribute name="Specification-Vendor" value="IzPack."/>
                <attribute name="Implementation-Title" value="IzPack compiler"/>
                <attribute name="Implementation-Version" value="${ver}"/>
                <attribute name="Implementation-Vendor" value="IzPack."/>
            </section>
        </manifest>
    </target>
    <target name="build.compiler" depends="compile.compiler, compiler.manifest">
        <echo message="Build ${compiler.jar}"/>
        <delete file="${compiler.jar}" verbose="true"/>
        <jar jarfile="${compiler.jar}" manifest="${compiler.manifest}">
            <fileset dir="${build.dir}">
                <include name="com/izforge/izpack/*.class"/>
                <include name="com/izforge/izpack/compiler/*.class"/>
                <include name="com/izforge/izpack/util/OsConstraint.class"/>
                <include name="com/izforge/izpack/util/Debug.class"/>
                <include name="com/izforge/izpack/util/NotEmptyValidator.class"/>
                <include name="com/izforge/izpack/ant/*.class"/>
                <include name="com/izforge/izpack/ant/langpacks/*.properties"/>
                <include name="com/izforge/izpack/installer/VariableValueMap.class"/>
                <include name="com/izforge/izpack/installer/VariableValueMapImpl.class"/>
                <include name="com/izforge/izpack/installer/VariableSubstitutor.class"/>
                <include name="net/n3/nanoxml/*.class"/>
            </fileset>
        </jar>
    </target>

    <!-- Package standalone-compiler.jar -->
    <target name="standalone-compiler.manifest">
        <manifest file="${standalone-compiler.manifest}">
            <attribute name="Built-By" value="IzPack"/>
            <attribute name="Class-Path" value="ant.jar"/>
            <attribute name="Main-Class" value="com.izforge.izpack.compiler.Compiler"/>
            <section name="com/izforge/izpack/standalone-compiler/">
                <attribute name="Specification-Title" value="IzPack compiler"/>
                <attribute name="Specification-Version" value="${rel}"/>
                <attribute name="Specification-Vendor" value="IzPack."/>
                <attribute name="Implementation-Title" value="IzPack compiler"/>
                <attribute name="Implementation-Version" value="${ver}"/>
                <attribute name="Implementation-Vendor" value="IzPack."/>
            </section>
        </manifest>
    </target>
    <target name="build.standalone-compiler" depends="compile.compiler, standalone-compiler.manifest, build.installer, build.uninstaller, build.panels">
        <echo message="Build ${standalone-compiler.jar}"/>
        <delete file="${standalone-compiler.jar}" verbose="true"/>
        <jar jarfile="${standalone-compiler.jar}" manifest="${standalone-compiler.manifest}">
            <fileset dir="${build.dir}">
                <include name="com/izforge/izpack/*.class"/>
                <include name="com/izforge/izpack/compiler/*.class"/>
                <include name="com/izforge/izpack/util/OsConstraint.class"/>
                <include name="com/izforge/izpack/util/Debug.class"/>
                <include name="com/izforge/izpack/util/NotEmptyValidator.class"/>
                <include name="com/izforge/izpack/ant/*.class"/>
                <include name="com/izforge/izpack/ant/langpacks/*.properties"/>
                <include name="com/izforge/izpack/installer/VariableValueMap.class"/>
                <include name="com/izforge/izpack/installer/VariableValueMapImpl.class"/>
                <include name="com/izforge/izpack/installer/VariableSubstitutor.class"/>
                <include name="net/n3/nanoxml/*.class"/>
            </fileset>
            <zipfileset src="${basedir}/lib/ant.jar"/>
            <fileset dir="${basedir}">
                <include name="bin/langpacks/flags/*"/>
                <include name="bin/langpacks/installer/*"/>
                <include name="bin/native/izpack/*"/>
                <include name="bin/panels/*Panel.jar"/>
                <include name="lib/uninstaller.jar"/>
                <include name="lib/installer.jar"/>
                <include name="lib/kunststoff.jar"/>
                <exclude name="**/CVS"/>
            </fileset>
        </jar>
    </target>

    <!-- Compiles the installer src files -->
    <target name="compile.installer" depends="prepare">
        <javac srcdir="${src.dir}" classpath="${basedir}/lib/jakarta-regexp-1.3.jar" destdir="${build.dir}" optimize="on" deprecation="on" debug="${debug}">
            <include name="com/izforge/izpack/*.java"/>
            <include name="com/izforge/izpack/gui/*.java"/>
            <include name="com/izforge/izpack/installer/*.java"/>
            <include name="com/izforge/izpack/util/*.java"/>
            <include name="com/izforge/izpack/util/os/*.java"/>
            <include name="net/n3/nanoxml/*.java"/>
        </javac>
    </target>

    <!-- Package installer.jar -->
    <target name="installer.manifest">
        <manifest file="${installer.manifest}">
            <attribute name="Built-By" value="IzPack"/>
            <attribute name="Class-Path" value=""/>
            <attribute name="Main-Class" value="com.izforge.izpack.installer.Installer"/>
            <section name="com/izforge/izpack/installer/">
                <attribute name="Specification-Title" value="IzPack installer"/>
                <attribute name="Specification-Version" value="${rel}"/>
                <attribute name="Specification-Vendor" value="IzPack."/>
                <attribute name="Implementation-Title" value="IzPack installer"/>
                <attribute name="Implementation-Version" value="${ver}"/>
                <attribute name="Implementation-Vendor" value="IzPack."/>
            </section>
        </manifest>
    </target>
    <target name="build.installer" depends="compile.installer, installer.manifest">
        <echo message="Build ${installer.jar}"/>
        <delete file="${installer.jar}" verbose="true"/>
        <jar jarfile="${installer.jar}" manifest="${installer.manifest}">
            <fileset dir="${build.dir}">
                <include name="com/izforge/izpack/*.class"/>
                <include name="com/izforge/izpack/gui/*.class"/>
                <include name="com/izforge/izpack/installer/*.class"/>
                <include name="com/izforge/izpack/util/*.class"/>
                <include name="com/izforge/izpack/util/os/*.class"/>
                <include name="net/n3/nanoxml/*.class"/>
            </fileset>
            <zipfileset src="${basedir}/lib/jakarta-regexp-1.3.jar">
                <include name="org/apache/regexp/*.class" />
            </zipfileset>
            <fileset dir="${src.dir}">
                <include name="com/izforge/izpack/installer/*.xml"/>
                <include name="com/izforge/izpack/installer/*.properties"/>
            </fileset>
            <fileset dir="${img.dir}/installer"/>
        </jar>
    </target>

    <!-- Compiles the uninstaller src files -->
    <target name="compile.uninstaller" depends="prepare">
        <javac srcdir="${src.dir}" destdir="${build.dir}" optimize="on" deprecation="on" debug="${debug}">
            <include name="com/izforge/izpack/LocaleDatabase.java"/>
            <include name="com/izforge/izpack/gui/*.java"/>
            <include name="com/izforge/izpack/util/*.java"/>
            <include name="com/izforge/izpack/uninstaller/*.java"/>
            <exclude name="com/izforge/izpack/gui/IzPackKMetalTheme.java"/>
            <include name="net/n3/nanoxml/*.java"/>
        </javac>
    </target>

    <!-- Package uninstaller.jar -->
    <target name="uninstaller.manifest">
        <manifest file="${uninstaller.manifest}">
            <attribute name="Built-By" value="IzPack"/>
            <attribute name="Class-Path" value=""/>
            <attribute name="Main-Class" value="com.izforge.izpack.uninstaller.Uninstaller"/>
            <section name="com/izforge/izpack/uninstaller/">
                <attribute name="Specification-Title" value="IzPack uninstaller"/>
                <attribute name="Specification-Version" value="${rel}"/>
                <attribute name="Specification-Vendor" value="IzPack."/>
                <attribute name="Implementation-Title" value="IzPack uninstaller"/>
                <attribute name="Implementation-Version" value="${ver}"/>
                <attribute name="Implementation-Vendor" value="IzPack."/>
            </section>
        </manifest>
    </target>
    <target name="build.uninstaller" depends="compile.uninstaller, uninstaller.manifest">
        <echo message="Build ${uninstaller.jar}"/>
        <delete file="${uninstaller.jar}" verbose="true"/>
        <jar jarfile="${uninstaller.jar}" manifest="${uninstaller.manifest}">
            <fileset dir="${build.dir}">
                <include name="com/izforge/izpack/LocaleDatabase.class"/>
                <include name="com/izforge/izpack/gui/*.class"/>
                <include name="com/izforge/izpack/uninstaller/*.class"/>
                <include name="com/izforge/izpack/ExecutableFile.class"/>
                <include name="com/izforge/izpack/util/AbstractUI*.class"/>
                <include name="com/izforge/izpack/util/FileExecutor*.class"/>
                <include name="com/izforge/izpack/util/Console.class"/>
                <include name="com/izforge/izpack/util/Debug.class"/>
                <include name="com/izforge/izpack/util/Os*.class"/>
                <exclude name="com/izforge/izpack/gui/IzPackKMetalTheme.class"/>
                <include name="net/n3/nanoxml/*.class"/>
            </fileset>
            <fileset dir="${img.dir}/uninstaller"/>
        </jar>
    </target>

    <!-- Compile a panel -->
    <target name="compile.panel">
        <echo message="Compiles panel ${panel}"/>
        <javac srcdir="${src.dir}" destdir="${build.dir}" classpath="${installer.jar}" optimize="on" deprecation="on" debug="${debug}">
            <include name="com/izforge/izpack/panels/${panel}*.java"/>
        </javac>
        <echo message="Creates bin/panels/${panel-dir} directory"/>
        <mkdir dir="${bin.dir}/panels/${panel-dir}"/>
        <echo message="Moves ${panel}.class into bin/panels/${panel-dir}"/>
        <move todir="${bin.dir}/panels/${panel-dir}">
            <fileset dir="${build.dir}/com/izforge/izpack/panels">
                <include name="${panel}*"/>
            </fileset>
        </move>
    </target>

    <!-- Make JAR for a panel -->
    <target name="compile.panel.finish">
        <echo message="Making JAR for panel ${panel}"/>
        <jar jarfile="${bin.dir}/panels/${panel}.jar">
            <fileset dir="${bin.dir}/panels/${panel}">
                <include name="*.class"/>
            </fileset>
        </jar>
    </target>

    <!-- convenience: compile simple panel and finish it -->
    <target name="compile.panel.simple">
        <antcall target="compile.panel">
            <param name="panel" value="${panel}"/>
            <param name="panel-dir" value="${panel-dir}"/>
        </antcall>
        <antcall target="compile.panel.finish">
            <param name="panel" value="${panel}"/>
        </antcall>
    </target>

    <!-- Compile all panels and put them at the right location -->
    <target name="build.panels" depends="build.installer">
        <antcall target="compile.panel.simple">
            <param name="panel" value="FinishPanel"/>
            <param name="panel-dir" value="FinishPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="HelloPanel"/>
            <param name="panel-dir" value="HelloPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="InfoPanel"/>
            <param name="panel-dir" value="InfoPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="InstallPanel"/>
            <param name="panel-dir" value="InstallPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="LicencePanel"/>
            <param name="panel-dir" value="LicencePanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="PacksPanel"/>
            <param name="panel-dir" value="PacksPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="ImgPacksPanel"/>
            <param name="panel-dir" value="ImgPacksPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="HTMLLicencePanel"/>
            <param name="panel-dir" value="HTMLLicencePanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="HTMLInfoPanel"/>
            <param name="panel-dir" value="HTMLInfoPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="TargetPanel"/>
            <param name="panel-dir" value="TargetPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="XInfoPanel"/>
            <param name="panel-dir" value="XInfoPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="ShortcutData"/>
            <param name="panel-dir" value="ShortcutPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="ShortcutPanel"/>
            <param name="panel-dir" value="ShortcutPanel"/>
        </antcall>
        <antcall target="compile.panel.finish">
            <param name="panel" value="ShortcutPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="UserInputPanel"/>
            <param name="panel-dir" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="RuleTextField"/>
            <param name="panel-dir" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="RuleInputField"/>
            <param name="panel-dir" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="Validator"/>
            <param name="panel-dir" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="Processor"/>
            <param name="panel-dir" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="ProcessingClient"/>
            <param name="panel-dir" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel">
            <param name="panel" value="PasswordGroup"/>
            <param name="panel-dir" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel.finish">
            <param name="panel" value="UserInputPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="CompilePanel"/>
            <param name="panel-dir" value="CompilePanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="ProcessPanel"/>
            <param name="panel-dir" value="ProcessPanel"/>
        </antcall>
        <antcall target="compile.panel.simple">
            <param name="panel" value="SudoPanel" />
            <param name="panel-dir" value="SudoPanel" />
        </antcall>
    </target>

    <!-- Performs some cleanups -->
    <target name="clean">
        <echo message="Cleaning-up"/>
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${build.dir}"/>
            <fileset dir="${dist.dir}"/>
            <fileset dir="${basedir}/src/">
                <include name="*.manifest"/>
            </fileset>
            <fileset dir="${basedir}/bin/panels/">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${basedir}/lib/">
                <include name="compiler.jar"/>
                <include name="standalone-compiler.jar"/>
                <include name="frontend.jar"/>
                <include name="installer.jar"/>
                <include name="uninstaller.jar"/>
            </fileset>
        </delete>
    </target>

    <!-- Builds all compilation targets -->
    <target name="all" depends="build.compiler,build.installer,build.uninstaller,build.panels,build.standalone-compiler"/>

    <!-- Builds the Javadoc -->
    <target name="build.javadoc" depends="prepare">
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc destdir="${build.dir}/javadoc" access="private" classpath="${basedir}/lib/kunststoff.jar:${basedir}/lib/ant.jar">
            <packageset dir="${src.dir}">
                <exclude name="**/CVS"/>
            </packageset>
        </javadoc>
        <copy todir="${doc.dir}/izpack/javadoc">
            <fileset dir="${build.dir}/javadoc">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <!-- Creates an installer for IzPack -->
    <target name="generate.installer">

        <!-- Allows us to use the IzPack Ant task -->
        <taskdef name="izpack" classpath="${basedir}/lib/compiler.jar" classname="com.izforge.izpack.ant.IzPackTask"/>

        <!-- Copies the files to the dist directory -->
        <echo message="Copies the image of the distribution to ${dist.dir}"/>
        <copy todir="${dist.dir}" includeEmptyDirs="yes">
            <fileset dir="${basedir}">
                <include name="bin/**"/>
                <include name="lib/*.jar"/>
                <include name="doc/**"/>
                <include name="legal/**"/>
                <include name="src/**"/>
                <include name="sample/**"/>
                <include name="*.txt"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/bin" includeEmptyDirs="yes">
            <fileset dir="${basedir}">
                <include name="langpacks/**"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}" includeEmptyDirs="yes">
            <fileset dir="${dist-files.dir}">
                <include name="useNativeLAF"/>
                <include name="*.jpg"/>
                <include name="*.html"/>
                <include name="Licence.txt"/>
                <include name="IzPack-install.xml"/>
                <include name="shortcutSpec.xml"/>
            </fileset>
        </copy>
        <copy todir="${dist.dir}/bin" includeEmptyDirs="yes" overwrite="yes">
            <fileset dir="${dist-files.dir}">
                <include name="izpack-fe*"/>
                <include name="compile*"/>
            </fileset>
        </copy>

        <!-- We call IzPack -->
        <echo message="Makes the installer using IzPack"/>
        <izpack input="${dist.dir}/IzPack-install.xml"
                output="${dist.dir}/IzPack-install-${ver}.${rel}.jar"
                installerType="standard" basedir="${dist.dir}"
                izPackDir="${dist.dir}/"/>

    </target>
  
    <!--
        Fixes CR/LF by applying the Unix convention (\n for endlines).
        It also fixes the encoding problems by moving it to UTF-8.
    -->
    <target name="fix.crlf">
        <fixcrlf srcDir="${src.dir}" eol="lf" eof="remove" encoding="UTF-8">
            <include name="**/*.java"/>
            <include name="**/*.xml"/>
            <include name="**/*.properties"/>
        </fixcrlf>
    </target>
    
    <!-- Runs a testing installer. -->
    <target name="run.installer">
        <java jar="../_dist/IzPack-install.jar" fork="true" />
    </target>

    <!-- Makes everything, from compilation to generating an installer. -->
    <target name="dist" depends="all,build.javadoc,generate.installer"/>

</project>
