<!-- This Ant build file illustrates how to process applications.
     Usage: ant -f examples/ant/applications.pro -->

<project name="Applications" default="obfuscate" basedir="../..">

<target name="obfuscate">
   <taskdef name="proguard" classname="proguard.ant.ProGuardTask"
            classpath="/usr/local/java/proguard/lib/proguard.jar" />

   <proguard printseeds="on"
             outjar="out.jar">
      <libraryjar name="${java.home}/lib/rt.jar" />
      <!-- Specify your library jars here. -->
      <!-- Specify your input jars here. -->
      <injar name="in.jar" />

      <!-- Preserve all public applications. -->
       <keep access="public">
          <method access="public static" name="main(java.lang.String[])" />
       </keep>

      <!-- Preserve all native method names and the names of their classes. -->
      <keepclasseswithmembernames>
         <method access="native" />
      </keepclasseswithmembernames>

      <!-- Explicitly preserve all serialization members. The Serializable
           interface is only a marker interface, so it wouldn't save them.
           You can comment this out if your library doesn't use serialization.
           If your code contains serializable classes that have to be backward
           compatible, please refer to the manual. -->
      <keepclassmembers name="*" implements="java.io.Serializable">
         <field access="final" type="long" name="serialVersionUID" />
         <method access="private" name="writeObject(java.io.ObjectOutputStream)" />
         <method access="private" name="readObject(java.io.ObjectInputStream)" />
         <method type="java.lang.Object" name="writeReplace()" />
         <method type="java.lang.Object" name="readResolve()" />
      </keepclassmembers>

      <!-- Your application may contain more items that need to be preserved;
        typically classes that are dynamically created using Class.forName -->
   </proguard>
</target>

</project>
