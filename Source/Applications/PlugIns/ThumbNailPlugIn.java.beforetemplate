// ThumbNailPlugIn - convert JPEG to smaller thumbnail image
// MJM
// May, 2004
// Copyright 2004 Creare Incorporated
//
// JPW 01/05/2005: Add "-n" option to allow user to set PlugIn name

import com.rbnb.sapi.ChannelMap;
import com.rbnb.sapi.PlugIn;
import com.rbnb.sapi.PlugInChannelMap;
import com.rbnb.sapi.Sink;
import java.awt.*;
import java.io.*;
import java.awt.image.*;
//import javax.imageio.ImageIO;
import com.sun.image.codec.jpeg.*;

public class ThumbNailPlugIn {
	private String address=new String("localhost:3333");  // server to connect
	private String source=new String("");                 // jpeg source/channel
	private String sinkName=new String("TNsink");         // sink name
	private String pluginName=new String("ThumbNail");    // plugin name 
	private double scale = 0.5;                           // image scale factor (0-4)
	private float quality = (float).50;                   // image quality (0-1)
	private PlugIn plugin=null;                           // plugin connection
	private Sink sink=null;                               //sink connection
	private String imagechan=null;                        // channel name
	private int maxImage=10;                              // max images for multi-image request
	
	public ThumbNailPlugIn(String[] args) {
		for (int i=0;i<args.length;i++) {
			if (args[i].startsWith("-a")) {
				if (args[i].length()==2) address=args[++i];
				else address=args[i].substring(2);
			}
			if (args[i].startsWith("-c")) {
				if (args[i].length()==2) {
					if(((i+1)<args.length) && !args[i+1].startsWith("-")) 
						source=args[++i];  // skip empty -c flag
				}
				else source=args[i].substring(2);
			}
			if (args[i].startsWith("-s")) {
				if (args[i].length()==2) scale=Double.parseDouble(args[++i]);
				else scale=Double.parseDouble(args[i].substring(2));
			}
			if (args[i].startsWith("-q")) {
				if (args[i].length()==2) quality=Float.parseFloat(args[++i]);
				else quality=Float.parseFloat(args[i].substring(2));
			}
			if (args[i].startsWith("-m")) {
				if (args[i].length()==2) maxImage=Integer.parseInt(args[++i]);
				else maxImage=Integer.parseInt(args[i].substring(2));
			}
			// JPW 01/05/2005: Add "-n" option to let user specify the PlugIn name
			if (args[i].startsWith("-n")) {
				if (args[i].length()==2) pluginName=args[++i];
				else pluginName=args[i].substring(2);
			}
		}
		/*
		System.err.println("After argument parsing:\n" +
		"address = " + address + "\n" +
		"source = " + source + "\n" +
		"scale = " + scale + "\n" +
		"quality = " + quality + "\n" +
		"maxImage = " + maxImage);
		*/
	}
	
	public static void main(String[] args) {
		(new ThumbNailPlugIn(args)).exec();
	}
	
	public byte[] thumbnailer(byte[] jpeg, double scale, float quality) {
		
		// noop check
		if((scale == 1.) && (quality == 1.)) return(jpeg);
		
		// create image from input bytearray
		Image image = Toolkit.getDefaultToolkit().createImage(jpeg);
		try {       // wait for image to be realized
			MediaTracker mediaTracker = new MediaTracker(new Container());
			mediaTracker.addImage(image, 0);
			mediaTracker.waitForID(0);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		// determine thumbnail size from WIDTH and HEIGHT
		int imageWidth = image.getWidth(null);
		int imageHeight = image.getHeight(null);
		int thumbWidth  = (int)((double)imageWidth * scale);
		int thumbHeight = (int)((double)imageHeight * scale);
		
		// draw original image to thumbnail image object and
		// scale it to the new size on-the-fly
		BufferedImage thumbImage = new BufferedImage(thumbWidth, 
		thumbHeight, BufferedImage.TYPE_INT_RGB);
		Graphics2D graphics2D = thumbImage.createGraphics();
		graphics2D.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
		RenderingHints.VALUE_INTERPOLATION_BILINEAR);
		graphics2D.drawImage(image, 0, 0, thumbWidth, thumbHeight, null);
		// save thumbnail image to OutputStream
		ByteArrayOutputStream out = new ByteArrayOutputStream();
		//    ImageIO.write(image, "jpg", out);
		JPEGImageEncoder encoder = JPEGCodec.createJPEGEncoder(out);
		JPEGEncodeParam param = encoder.
		getDefaultJPEGEncodeParam(thumbImage);
		param.setQuality((float)quality, false);
		encoder.setJPEGEncodeParam(param);
		try {
			encoder.encode(thumbImage);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return(out.toByteArray());
	}
	
	public void exec() {
		try {
			//make connections
			sink=new Sink();
			sink.OpenRBNBConnection(address,sinkName);
			plugin=new PlugIn();
			plugin.OpenRBNBConnection(address,pluginName);
			
			//register thumbnail channel
			ChannelMap cm=new ChannelMap();
			ChannelMap cmg=new ChannelMap();
			
			if(source.length() > 0) {
				cm.Add(source.substring(source.lastIndexOf('/')+1));
				plugin.Register(cm);
			}
			
			double newTime=0.;
			//loop handling requests - note multithreaded would be better.
			while (true) {
				PlugInChannelMap picm=plugin.Fetch(-1);         // block until request arrives
				//System.err.println("got request: "+picm.GetName(0));
				//map virtual to real channels
				
				cm=new ChannelMap();
				if(source.length() > 0) 
					cm.Add(source);                         // presume single channel
				else    cm.Add(picm.GetName(0));
				
				
				double start = picm.GetRequestStart();
				double duration = picm.GetRequestDuration();
				double end = start + duration;
				double interval = 1.;  // for now presume 1 sec interval
				double increment = duration / maxImage;
				String reference = picm.GetRequestReference();
				//System.err.println("THUMBNAIL1: nchan: "+picm.NumberOfChannels()+", name: "+picm.GetName(0)+", ref: "+reference);
				
				if(reference.equals("registration")) {  // mjm 10/4/05:  try to handle registration better
					//System.err.println("TNPI registration request for: "+picm.GetName(0));
					if((picm.NumberOfChannels()==1) && picm.GetName(0).equals("*")) {	// if webserver gets confirmation that '*' exists,
						// it seems to resolve it to the root directory
						// this only happens via routing plugin,
						// which seems to not pass on an empty channel or folder ??? !
						picm.Clear();
						picm.Add(".");				// cluge to keep web interface happy
						picm.PutDataAsString(0,".");
						plugin.Flush(picm); 
						continue;
					}
				}
				
				// convert relative into absolute request
				if(duration > 0.) {
					if(reference.equals("newest")) {
						// would be more efficient to use Registration for time limits, but can't depend on it
						sink.Request(cm, 0., 0., "newest");  
						cmg = sink.Fetch(-1);
						start = cmg.GetTimeStart(0) - duration;
						end = cmg.GetTimeStart(0);
						reference = "absolute";
					}
					if(reference.equals("oldest")) {
						sink.Request(cm,picm.GetRequestStart(), 0., "oldest");
						cmg = sink.Fetch(-1);
						start = cmg.GetTimeStart(0);
						System.err.println("OLD Start: "+cmg.GetTimeStart(0)+", start: "+start);
						end = start + duration;
						reference = "absolute";
					}      
				}
				
				// Align times to repeatable "top-of" intervals
				//System.err.println("Start: "+picm.GetRequestStart());
				if((start>0.) && (increment>0.)) start = Math.floor(start/increment) * increment;
				//System.err.println("Reference: "+picm.GetRequestReference()+", duration: "+duration);
				//System.err.println("start: "+start+", end: "+end+", increment: "+increment);
				if(increment < interval) increment = interval;
				
				for(double t=start; true; t+=increment) {
					
					if(maxImage <= 1) t = end;  // mjm 1/5/06: if only to get one, get most recent
					
					if((t>=end) && picm.GetRequestReference().equals("newest")) {
						sink.Request(cm, 0., 0., "newest");
					} else
					sink.Request(cm, t, 0., reference);	    // request source data	      
					
					cmg = sink.Fetch(-1);
					
					if(cmg.NumberOfChannels() > 0) {
						//System.err.println("got: "+cmg+", size: "+cmg.GetData(0).length+", at time: "+cmg.GetTimeStart(0)+", "+t);
						//copy data,times,types from source to result channel
						//picm.PutTimeRef(cm,0);  // this fails if multiple frames
						picm.PutTime(cmg.GetTimeStart(0),0);
						if(picm.GetRequestReference().equals("registration"))
							picm.PutDataAsByteArray(0, cmg.GetData(0));
						else {	
							picm.PutDataAsByteArray(0, thumbnailer(cmg.GetData(0),scale,quality));
							//picm.PutMime(0,cmg.GetMime(0));
							picm.PutMime(0, "image/jpeg");
						}
					}
					if(t>=end) break;
				}
				//System.err.println("THUMBNAIL2: nchan: "+picm.NumberOfChannels()+", name: "+picm.GetName(0));
				plugin.Flush(picm);        //send response
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}//end exec method
	
}//end ThumbNailPlugIn class

