/*
  *****************************************************************
  ***                                                           ***
  ***   Name : PlotArea.java    ()                              ***
  ***   By   : Eric Friets      (Creare Inc., Hanover, NH)      ***
  ***   For  : FlyScan                                          ***
  ***   Date : December 1997                                    ***
  ***                                                           ***
  ***   Copyright 1997 Creare Inc.                              ***
  ***                                                           ***
  ***   Description : handles the graphics for one plot area,   ***
  ***                 exclusive of axes.                        ***
  ***   Input :                                                 ***
  ***                                                           ***
  ***   Input/Output :                                          ***
  ***                                                           ***
  ***   Output :                                                ***
  ***                                                           ***
  ***   Returns :                                               ***
  ***                                                           ***
  *****************************************************************
*/

package com.rbnb.plot;

import java.util.Hashtable;
import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseAdapter;
//EMF 5/18/01: use replacement Time
//import COM.Creare.RBNB.Time;

public class PlotArea extends Container {
	private PlotContainer pCont=null; //parent container
   private Dimension oldSize = new Dimension(0,0);
   //private float absMin=0;	// default data range
   //private float absMax=99;
   private float duration=(float)0.1;
   private float ordMin= -1;
   private float ordMax=1;
   private float absScale=1;	// default plot scaling factors
   private float absOffset=0;
   private float ordScale=1;
   private float ordOffset=0;
   private int numHorizGridLines=1;
   private boolean newScale=false;
   private double[] absDoubleIn=null; //data to be plotted
   private double start;
   private double[] ordDoubleIn=null;
   private float[] ordFloatIn=null;
   //EMF 9/12/00: add support for ints
   private int[] ordIntIn=null;
   private short[] ordShortIn=null;
   private boolean newData=false;   //
   private int ordMode=PlotContainer.FloatData;
   private int[] absData=null;
   private int[] ordData=null;
   private Image bufferImage=null;
   private Color background = new Color(0,0,75);
   private Color gridline = new Color(255,100,100);
   private Color dataline = new Color(255,255,255);

/*
  *****************************************************************
  ***                                                           ***
  ***   Name : PlotArea         (constructor)                   ***
  ***   By   : Eric Friets      (Creare Inc., Hanover, NH)      ***
  ***   For  : FlyScan                                          ***
  ***   Date :                                                  ***
  ***                                                           ***
  ***   Copyright 1997 Creare Inc.                              ***
  ***                                                           ***
  ***   Description : creates a new plot area                   ***
  ***                                                           ***
  ***   Input :                                                 ***
  ***                                                           ***
  ***   Input/Output :                                          ***
  ***                                                           ***
  ***   Output :                                                ***
  ***                                                           ***
  ***   Returns : instance of PlotArea class                    ***
  ***                                                           ***
  *****************************************************************
*/
   public PlotArea(PlotContainer pc) {
		pCont=pc;
		setNoData();
      }
	
	//addNotify - override, since 'this' is null until peer is created
	public void addNotify() {
		super.addNotify();
		addMouseListener(new MouseTrack(pCont));
		}

   public void setAbscissa(Time dur) {
      synchronized(this) {
			duration=dur.getFloatValue();
			newScale=true;
			}
      repaint();
      }

   public void setOrdinate(double min, double max, int numlines) {
      synchronized(this) {
	 if (min==max) {
	    System.out.println("PlotArea: zero range");
	    max=max+1;
	    }

	 // INB 08/17/2000
	 // Added these checks to eliminate potential overflow problems.
	 ordMin=(float)min;
	 if (Math.abs(min - max) < 1.0e-34) {
	   if (Math.abs(ordMin) > 1.) {
	     ordMax = ordMin + (float) 1.;
	   } else if (Math.abs(ordMin) > 1.e-6) {
	     ordMax = ordMin + (float) 1.e-6;
	   } else if (Math.abs(ordMin) > 1.e-13) {
	     ordMax = ordMin + (float) 1.e-13;
	   } else if (Math.abs(ordMin) > 1.e-20) {
	     ordMax = ordMin + (float) 1.e-20;
	   } else if (Math.abs(ordMin) > 1.e-27) {
	     ordMax = ordMin + (float) 1.e-27;
	   } else {
	     ordMax = ordMin + (float) 1.e-34;
	   }
	 } else {
	   ordMax=(float)max;
	 }
	 numHorizGridLines=numlines;
	 newScale=true;
	 }
      repaint();
      }
      
   public void setNoData() {
      synchronized(this) {
	 absDoubleIn=null;
	 ordShortIn=null;
         //EMF 9/12/00: add support for int data
         ordIntIn=null;
	 ordFloatIn=null;
	 ordDoubleIn=null;
	 absData=null;
	 ordData=null;
	 newData=true;
	 }
      repaint();
      }

   public void setShortData(double[] absIn, short[] ordIn,double st) {
      synchronized(this) {
	 absDoubleIn=absIn;
	 ordShortIn=ordIn;
	 start=st;
	 newData=true;
	 ordMode=PlotContainer.ShortData;
	 }
      repaint();
      }

   //EMF 9/12/00: add support for integers
   public void setIntData(double[] absIn, int[] ordIn,double st) {
      synchronized(this) {
	 absDoubleIn=absIn;
	 ordIntIn=ordIn;
	 start=st;
	 newData=true;
	 ordMode=PlotContainer.IntData;
	 }
      repaint();
      }

   public void setFloatData(double[] absIn, float[] ordIn,double st) {
      synchronized(this) {
	 absDoubleIn=absIn;
	 ordFloatIn=ordIn;
	 start=st;
	 newData=true;
	 ordMode=PlotContainer.FloatData;
	 }
      repaint();
      }

   public void setDoubleData(double[] absIn,double[] ordIn,double st) {
      synchronized(this) {
	 absDoubleIn=absIn;
	 ordDoubleIn=ordIn;
	 start=st;
	 newData=true;
	 ordMode=PlotContainer.DoubleData;
	 }
      repaint();
      }
   
   public void update(Graphics g) {
      System.out.println("PlotArea.update()");
      paint(g);
      }

   public void paint(Graphics g) {
      Dimension size=getSize();
      boolean newSize = false;
      if (size.width!=oldSize.width || size.height!=oldSize.height)
			newSize=true;
		if (size.width<=0 || size.height<=0) {
			super.paint(g);
			return;
			}
      synchronized(this) {
      if (newSize==true || newScale==true || newData==true) {	// need to redraw
	 if (newSize==true) bufferImage = createImage(size.width,size.height);
         Graphics bi = bufferImage.getGraphics();
         bi.setColor(background);
         //bi.fillRect(1,1,size.width-3,size.height-3);
         bi.fillRect(0,0,size.width-1,size.height-1);
         bi.setColor(gridline);
         bi.drawRect(0,0,size.width-1,size.height-1);
         for (int i=1;i<10;i++) {  // draw vertical gridlines
            bi.drawLine(i*size.width/10,1,i*size.width/10,size.height-2);
	    }
	 for (int i=1;i<numHorizGridLines;i++) {  // draw horizontal gridlines
            bi.drawLine(1,i*size.height/numHorizGridLines,
			size.width-2,i*size.height/numHorizGridLines);
	    }
         bi.setColor(dataline);
	 if (newSize || newScale) {
            //absScale=(1-size.width)/(absMin-absMax);
            //absOffset=absMin*(1-size.width)/(absMin-absMax);
            absScale=(size.width-1)/duration;
            //absOffset=(float)start*(size.width-1)/duration;
	    absOffset=0; //start subtracted below
	    ordScale=(size.height-1)/(ordMin-ordMax);
            ordOffset=ordMax*(1-size.height)/(ordMin-ordMax);
	    oldSize.height=size.height;
	    oldSize.width=size.width;
//System.out.println("PlotArea.paint: width="+size.width+"   start="+start+"   duration="
//   +duration+"   absScale="+absScale+"   absOffset="+absOffset);
	    }
	 if (ordMode==PlotContainer.DoubleData && ordDoubleIn!=null) {
	    if (ordData==null || ordData.length!=ordDoubleIn.length) {
	       absData=new int[ordDoubleIn.length];
	       ordData=new int[ordDoubleIn.length];
	       }
	    for (int i=0;i<ordDoubleIn.length;i++) {
	       absData[i]=(int)((absDoubleIn[i]-start)*absScale + absOffset);
	       ordData[i]=(int)(ordDoubleIn[i]*ordScale + ordOffset);
	       }
	    }
	 else if (ordMode==PlotContainer.FloatData && ordFloatIn!=null) {
	    if (ordData==null || ordData.length!=ordFloatIn.length) {
	       absData=new int[ordFloatIn.length];
	       ordData=new int[ordFloatIn.length];
	       }
	    for (int i=0;i<ordFloatIn.length;i++) {
	       absData[i]=(int)((absDoubleIn[i]-start)*absScale + absOffset);
	       ordData[i]=(int)(ordFloatIn[i]*ordScale + ordOffset);
	       }
	    }
         //EMF 9/12/00: add support for int data
	 else if (ordMode==PlotContainer.IntData && ordIntIn!=null) {
	    if (ordData==null || ordData.length!=ordIntIn.length) {
	       absData=new int[ordIntIn.length];
	       ordData=new int[ordIntIn.length];
	       }
	    for (int i=0;i<ordIntIn.length;i++) {
	       absData[i]=(int)((absDoubleIn[i]-start)*absScale + absOffset);
	       ordData[i]=(int)(ordIntIn[i]*ordScale + ordOffset);
	       }
	    }
	 else if (ordMode==PlotContainer.ShortData && ordShortIn!=null) {
	    if (ordData==null || ordData.length!=ordShortIn.length) {
	       absData=new int[ordShortIn.length];
	       ordData=new int[ordShortIn.length];
	       }
	    for (int i=0;i<ordShortIn.length;i++) {
	       absData[i]=(int)((absDoubleIn[i]-start)*absScale + absOffset);
	       ordData[i]=(int)(ordShortIn[i]*ordScale + ordOffset);
	       }
	    }
         if (absData!=null) { //draw polyLine, or horizontal line if only one point
				//solaris/jdk1.1 only draws the first 64k points in the vector...

				if (absData.length>1) {
					//EMF 6/2/00: lockup problem
					//flyscan (NT4 running jdk1.2.2) with v1.1b7 occasionally never returns from polyline - tends to happen when starting many plots at once with the -r command line option
					bi.drawPolyline(absData,ordData,absData.length);
					}
				else bi.drawLine(0,ordData[0],size.width-1,ordData[0]);
				}
	 bi.dispose();
	 newScale=false;
	 newData=false;
	 }
	 } //end synchronized(this)
      g.drawImage(bufferImage,0,0,null);
      super.paint(g);
      }

	//MouseTrack class - tracks mouse location, changes cursor when over plot area as hint
	//to user that clicking here will do something
	public class MouseTrack extends MouseAdapter {
		PlotContainer pCont=null;
		Frame frame=null;
		Cursor pointer=new Cursor(Cursor.DEFAULT_CURSOR);
		Cursor hand=new Cursor(Cursor.HAND_CURSOR);
		boolean isRunning=false;
		
		public MouseTrack(PlotContainer pc) {
			pCont=pc;
			Component c=(Component)pc;
			
			while ((c=c.getParent())!=null)
				if (c instanceof Frame) frame=(Frame)c;
			}
		
		public void mouseEntered(MouseEvent me) {
			setCursor(hand);
			}
		
		public void mouseExited(MouseEvent me) {
			setCursor(pointer);
			}
		
		public void mouseReleased(MouseEvent me) {
			if (isRunning) {
				return;
				}
			else {
				isRunning=true;
				Hashtable ht=pCont.getParameters();
				OrdinateDialog od=new OrdinateDialog(frame,ht);
				od.show();
				od.dispose();
				if (od.proceed) pCont.setParameters(ht);
				isRunning=false;
				}
			}
		}
		
}
