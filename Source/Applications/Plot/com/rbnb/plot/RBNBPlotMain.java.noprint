  /*
  *****************************************************************
  ***                                                           ***
  ***   Name : RBNBPlotMain     (application/applet)            ***
  ***   By   : Eric Friets      (Creare Inc., Hanover, NH)      ***
  ***   For  : FlyScan/M0tran                                   ***
  ***   Date : December 1997                                    ***
  ***                                                           ***
  ***   Copyright 1997 Creare Inc.                              ***
  ***                                                           ***
  ***   Description : connects to a RBNB, plots data from       ***
  ***                 selected channels                         ***
  ***                                                           ***
  ***   Input : command line arguments                          ***
  ***                                                           ***
  ***   Input/Output :                                          ***
  ***                                                           ***
  ***   Output :  plots to screen, optionally to printer        ***
  ***                                                           ***
  ***   Returns :                                               ***
  ***								***
  ***	Modification History :					***
  ***	04/19/2000	JPW	Added "Export To DataTurbine"	***
  ***				support.			***
  ***   11/8/00         EMF     Added features to allow plot    ***
  ***                           to run within rbnbManager's JVM ***
  ***                           or as a PlugIn.                 ***
  ***                                                           ***
  *****************************************************************
*/

package com.rbnb.plot;

//EMF 5/18/01: use replacement Time,Connection,Channel
//import COM.Creare.RBNB.Time;
//import COM.Creare.RBNB.API.Connection;
//import COM.Creare.RBNB.API.Channel;
import com.rbnb.utility.HostAndPortDialog;
import com.rbnb.utility.InfoDialog;
import com.rbnb.utility.RBNBProcess;
import com.rbnb.utility.RBNBProcessInterface;
import java.applet.Applet;
import java.awt.Button;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Frame;
import java.awt.Graphics;
import java.awt.Label;
import java.awt.Menu;
import java.awt.MenuItem;
import java.awt.MenuBar;
import java.awt.Point;
import java.awt.PrintJob;
import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;

// class extends applet, but works as application or applet
public class RBNBPlotMain extends Applet implements ActionListener,Runnable {
    public Frame frame = null; // main plotting and control frame, drawn outside the browser
    boolean applicationRun=false;  //true if run as application
    private RunModeCubby rmc = null;
    private Button startButton = null;
    private LayoutCubby loc = null;
    private RBNBInterface rbnbInterface = null;
    private PlotsContainer pc = null;
    private ConfigCubby cc = null;
    private CheckboxMenuItem plot=null;
    private CheckboxMenuItem table=null;
    //EMF 1/26/01: add slave mode to menu
    private CheckboxMenuItem slave=null;
    private CheckboxMenuItem standard=null;
    private CheckboxMenuItem metrics=null;
    private CheckboxMenuItem all=null;
    private Cursor pointer = new Cursor(Cursor.DEFAULT_CURSOR);
    private Cursor hand = new Cursor(Cursor.HAND_CURSOR);
    private Cursor wait = new Cursor(Cursor.WAIT_CURSOR);
    private Thread runner;
    private UserControl uc=null;
    //EMF 11/8/00: added Environment instance to avoid state collisions
    //             between multiple instances of rbnbPlot running in same JVM
    private Environment environment=new Environment();
    //EMF 12/15/00: target object for passing to RBNBProcess.exit
    private RBNBProcessInterface target=null;
    
// default constructor method, no command line arguments
    public RBNBPlotMain() {
	applicationRun=false;
    }

// constructor method, with command line arguments and target for RBNBProcess.exit
    public RBNBPlotMain(String[] args) {
      this(args,null);
    }

// constructor method, with command line arguments for RBNB host and port
    public RBNBPlotMain(String[] args,RBNBProcessInterface targetI) {
        target=targetI;
	int idx,idx1,idx2,idx3,idx4;
	//handle the argument list
	for (idx=0;idx<args.length;idx++) {
	    if (args[idx].charAt(0) != '-') {
		System.err.println("Illegal command line argument:" + args[idx]);
		RBNBProcess.exit(-1,target);
	    }
	    
	    //deal with optional space after <dash><letter> before <value>
	    if (args[idx].length()==2) {
		idx1=idx+1;
		idx2=0;
	    }
	    else {
		idx1=idx;
		idx2=2;
	    }
	    
	    switch (args[idx].charAt(1)) {
		
		// -r [rbnbhost][:rbnbport]
	    case 'r':
		idx3=args[idx1].substring(idx2).indexOf(':');
		if (idx3==-1) { //no port given
		    environment.HOST=args[idx1].substring(idx2);
		}
		else {
		    if (idx2<idx3) {
                      environment.HOST=args[idx1].substring(idx2,idx2+idx3);
                    //EMF 3/5/01: correctly handle :port case
                    } else {
                      environment.HOST="localhost";
                    }
		    environment.PORT=(new Integer(args[idx1].substring(idx2+idx3+1))).intValue();
		}
		idx=idx1;
		break;
		
		// -S static mode (show all data, hide user controls
	    case 'S':
		environment.STATICMODE=true;
		break;
		
		// -k Kill RBNB on exit from plot
	    case 'k':
		environment.KILLRBNB=true;
		break;
		
		// -p specify position for main window (x,y)
	    case 'p':
		idx3=args[idx1].substring(idx2).indexOf(',');
		try {
		    environment.POSITION_X=Integer.parseInt(args[idx1].substring(idx2,idx2+idx3));
		    environment.POSITION_Y=Integer.parseInt(args[idx1].substring(idx2+idx3+1));
		}
		catch (NumberFormatException e) {}
		idx=idx1;
		if (environment.POSITION_X<0 || environment.POSITION_Y<0) {
		    System.err.println("-p format incorrect.  Use x,y.");
		    System.err.println("RBNBPlot aborting.");
		    RBNBProcess.exit(-3,target);
		}
		break;
		
		// -s specify manual scaling with min,max,div
	    case 's':
		idx3=args[idx1].substring(idx2).indexOf(',');
		idx4=args[idx1].substring(idx2).lastIndexOf(',');
		//use local variables, since Symantic compiler is too dumb to handle comparisons
		//with static variables correctly...
		double min=1,max=0;
		int div=0;
		try {
		    min=(new Double(args[idx1].substring(idx2,idx2+idx3))).doubleValue();
		    max=(new Double(args[idx1].substring(idx2+idx3+1,idx2+idx4))).doubleValue();
		    div=Integer.parseInt(args[idx1].substring(idx2+idx4+1));
		}
		catch (NumberFormatException e) {}
		if (div<0 || min>=max) {
		    System.err.println("-s format incorrect.  Use min,max,div.");
		    System.err.println("RBNBPlot aborting.");
		    RBNBProcess.exit(-3,target);
		}
		environment.SCALE_MIN=min;
		environment.SCALE_MAX=max;
		environment.SCALE_DIV=div;
		idx=idx1;
		break;
		
		// -d specify startup duration for plots
	    case 'd':
		environment.DURATION=new Time((new Double(args[idx1].substring(idx2))).doubleValue());
		idx=idx1;
		break;
		
		// -u specify units label for time (default is Sec)
	    case 'u':
		environment.TIME_LABEL=" "+args[idx1].substring(idx2);
		idx=idx1;
		break;
		
		// -w specify minimum wait time in RT mode to limit 'spinning'
	    case 'w':
		environment.RTWAIT=Integer.parseInt(args[idx1].substring(idx2));
		idx=idx1;
		break;
		
		// -c show all channels, even those with unknown point sizes
	    case 'c':
		environment.SHOWALLCHANNELS=true;
		break;
		
		// -n no streaming, just request mode RBNB data requests
		// EMF 8/27/99: added option, default true
		// EMF 9/30/99: changed default to false
	    case 'n':
		environment.STREAMING=true;
		break;
		
		//EMF 10/28/00: added SLAVEMODE flag for running plot via player
	    case 'N':
		environment.STREAMING=true;
		environment.SLAVEMODE=true;
		break;
		
	    case 'e':		// mjm
		environment.EXPORT = "jdbc:odbc:rbnb";
		if(idx1 < args.length) {
		    String temp = args[idx1].substring(idx2); 
		    if( (temp.charAt(0) != '-') && (temp != null) ) {
			environment.EXPORT = temp;
			idx = idx1;
		    }
		}
		System.err.println("export to: " +environment.EXPORT);
		break;
            //EMF 3/20/01: added FOURBYTEASINTEGER flag to force display as integer rather than float for 4 byte data values
            case 'i':
                environment.FOURBYTEASINTEGER=true;
                break;

	    default:
		System.err.println("Unrecognized switch: "+args[idx]);
		RBNBProcess.exit(-3,target);
	    } //end switch
	} //end for idx
	
	applicationRun=true;
	//environment.showState();
    }

// init() method     
// reads RBNB server and port if applet, lays out button that spawns external
// frame and starts real work
    public void init() {
	if (applicationRun) createFrame();
	else {
	    String parameter=null;
	    //get RBNB server and port from HTML file
	    parameter=getParameter("host");
	    if (parameter!=null) environment.HOST=parameter;
	    parameter=getParameter("port");
	    if (parameter!=null) environment.PORT=Integer.parseInt(parameter);
	    parameter=getParameter("staticmode");
	    if (parameter!=null && parameter.equals("true")) environment.STATICMODE=true;
	    parameter=getParameter("killrbnb");
	    if (parameter!=null && parameter.equals("true")) environment.KILLRBNB=true;
	    parameter=getParameter("position");
	    if (parameter!=null) {
		int idx=parameter.indexOf(',');
		try {
		    environment.POSITION_X=Integer.parseInt(parameter.substring(0,idx));
		    environment.POSITION_Y=Integer.parseInt(parameter.substring(idx+1));
		}
		catch (NumberFormatException e) {}
		if (environment.POSITION_X<0 || environment.POSITION_Y<0) {
		    System.err.println("position format incorrect.  Use x,y.");
		    System.err.println("RBNBPlot aborting.");
		    RBNBProcess.exit(-3,target);
		}
	    }
	    parameter=getParameter("scaling");
	    if (parameter!=null) {
		int idx1=parameter.indexOf(',');
		int idx2=parameter.lastIndexOf(',');
		//use local variables, since Symantic compiler is too dumb to handle comparisons
		//with static variables correctly...
		double min=1,max=0;
		int div=0;
		try {
		    min=(new Double(parameter.substring(0,idx1))).doubleValue();
		    max=(new Double(parameter.substring(idx1+1,idx2))).doubleValue();
		    div=Integer.parseInt(parameter.substring(idx2+1));
		}
		catch (NumberFormatException e) {}
		if (div<0 || min>=max) {
		    System.err.println("-s format incorrect.  Use min,max,div.");
		    System.err.println("RBNBPlot aborting.");
		    RBNBProcess.exit(-3,target);
		}
		environment.SCALE_MIN=min;
		environment.SCALE_MAX=max;
		environment.SCALE_DIV=div;
	    }
	    parameter=getParameter("duration");
	    if (parameter!=null) environment.DURATION=new Time((new Double(parameter).doubleValue()));
	    parameter=getParameter("timelabel");
	    if (parameter!=null) environment.TIME_LABEL=" "+parameter;
	    parameter=getParameter("rtwait");
	    if (parameter!=null) environment.RTWAIT=Integer.parseInt(parameter);
	    parameter=getParameter("showallchannels");
	    if (parameter!=null && parameter.equals("true")) environment.SHOWALLCHANNELS=true;
	    parameter=getParameter("streaming");
	    if (parameter!=null && parameter.equals("false")) environment.STREAMING=false;
	    
	    setLayout(new BorderLayout());
	    startButton = new Button("Start Plot");
	    startButton.addActionListener(this);
	    add(startButton,"Center");
	    setVisible(true);
	    //set the cursor to be a hand when over the button
	    setCursor(hand);
	}
    }
   
    public void actionPerformed(ActionEvent e) {
	if (e.getSource() instanceof Button) {
	    //set the cursor to hourglass
	    setCursor(wait);
	    if (frame == null) createFrame();
	}
	else if (e.getSource() instanceof MenuItem) {
	    MenuItem mi = (MenuItem)e.getSource();
	    String arg=mi.getLabel();
	    if (arg.equals("Exit")) {
		destroy();
		quitApp();
	    }
	    else if (arg.equals("Save Config")) {
		Hashtable config=new Hashtable();
		pc.getConfig(config);
		loc.set(LayoutCubby.SaveConfig);
		cc.setHash(config);
		//get list of already used channel names
		Channel[] chans=cc.getChannels();
		//pop dialog box
		ConfigDialog cd = new ConfigDialog(true,frame,chans);
		cd.show();
		cc.setChannel(cd.configName);
		cd.dispose();
	    }
	    else if (arg.equals("Load Config")) {
		loc.set(LayoutCubby.LoadConfig);
		Channel[] chans=cc.getChannels();
		ConfigDialog cd = new ConfigDialog(false,frame,chans);
		cd.show();
		cc.setChannel(cd.configName);
		cd.dispose();
		Hashtable config=cc.getHash();
		if (config==null) {
		    String[] aboutInfo = new String[2];
		    aboutInfo[0]=new String("Error reading configuration file.");
		    aboutInfo[1]=new String("Load aborted.");
		    InfoDialog id=new InfoDialog(frame,true,"Error",aboutInfo);
		    id.show();
		    id.dispose();
		    //ErrorDialog ed=new ErrorDialog(frame,"Error reading configuration file.","Load aborted.");
		    //ed.show();
		}
		else {
		    if (config.containsKey("mode") && Integer.parseInt((String)config.get("mode"))==LayoutCubby.PlotMode) {
			plot.setState(true);
			table.setState(false);
		    }
		    else {
			plot.setState(false);
			table.setState(true);
		    }
		    pc.setConfig(config);
		    pc.setDisplayMode(Integer.parseInt((String)config.get("mode")));
		    pc.setDisplayGroup(Integer.parseInt((String)config.get("dg.current")));
		}
	    }
	    // EMF 9/8/99: added Export
	    else if (arg.equals("Export to Clipboard")) {
		loc.set(LayoutCubby.ExportToCB);
	    }
	    // JPW 4/19/2000: added "Export to DataTurbine" feature
	    else if (arg.equals("Export to DataTurbine")) {
		loc.set(LayoutCubby.ExportToDT);
	    }
	    else if (arg.equals("Print")) {
		printScreen();
	    }
	    else if (arg.equals("Open RBNB")) {
		HostAndPortDialog hapd=new HostAndPortDialog(frame,true,"RBNB","Specify RBNB Connection",
							     environment.HOST,environment.PORT,applicationRun);
		hapd.show();
		if (hapd.state == HostAndPortDialog.OK) {
		    enableViewMenu();
		    environment.HOST=new String(hapd.machine);
		    environment.PORT=hapd.port;
		    loc.set(LayoutCubby.OpenRBNB);
		    frame.setCursor(wait);
		    frame.setTitle("rbnbPlot by Creare "+Environment.VERSION+" (connecting to "+environment.HOST+":"+
				   environment.PORT+"...)");
				//start thread to listen for response to open request
		    if (runner==null || !runner.isAlive()) {
			runner=new Thread(this);
			runner.start();
		    }
		}
		hapd.dispose();
	    }
	    else if (arg.equals("Refresh")) {
		loc.set(LayoutCubby.RefreshRBNB);
	    }
	    else if (arg.equals("Close RBNB")) {
		loc.set(LayoutCubby.CloseRBNB);
		frame.setTitle("rbnbPlot by Creare (no connection)");
	    }
	    else if (arg.equals("About")) {
		System.err.println("rbnbPlot by Creare, version "+Environment.VERSION);
		String[] aboutInfo=new String[3];
//# ifdef SERIALVERSION
//+			aboutInfo[0]=new String("rbnbPlot by Creare, " + SERIALVERSION);
//# else
		aboutInfo[0]=new String("rbnbPlot by Creare, Development Version");
//# endif
		aboutInfo[1]=new String("Copyright 1998, 1999 Creare, Inc.");
		aboutInfo[2]=new String("All Rights Reserved");
		InfoDialog id = new InfoDialog(frame, true, "About",aboutInfo);
		id.show();
		id.dispose();
		//AboutDialog ad=new AboutDialog(frame);
		//ad.show();
		//ad.dispose();
	    }
	    else if (arg.equals("OnLine Documentation")) { //disabled for now...
		if (applicationRun) {
		    Runtime rt = Runtime.getRuntime();
		    try {
			Process p = rt.exec("C:\\u\\SDP\\Product\\RBNB\\V1.0\\browser.bat http://outlet.creare.com/rbnb");
			//Process p = rt.exec("C:\Program Files\Netscape\Communicator\Program\netscape.exe http://outlet.creare.com/rbnb");
		    }
		    catch (IOException ioe) {
			System.err.println("cannot create process!");
			ioe.printStackTrace();
		    }
		}
	    }
	}
    }
   
    private void createFrame() {
	loc = new LayoutCubby();
	RBNBCubby rbc = new RBNBCubby();
	PosDurCubby pdc = new PosDurCubby();
	rmc = new RunModeCubby(environment.STATICMODE);
	cc = new ConfigCubby();
	
	
	
	MenuBar mb = new MenuBar();
	mb.setFont(new Font("dialog",Font.PLAIN,14));
	Menu file = new Menu("File");
	MenuItem open = new MenuItem("Open RBNB");
	open.addActionListener(this);
	file.add(open);
	MenuItem close = new MenuItem("Close RBNB");
	close.addActionListener(this);
	file.add(close);
	file.addSeparator();
	MenuItem load = new MenuItem("Load Config");
        //EMF 5/18/01: disable
	load.setEnabled(false); //load config not implemented
	load.addActionListener(this);
	file.add(load);
	MenuItem save = new MenuItem("Save Config");
        //EMF 5/18/01: disable
	save.setEnabled(false); //save config not implemented
	save.addActionListener(this);
	file.add(save);
	file.addSeparator();
	// EMF 9/8/99: added Export
	MenuItem export = new MenuItem("Export to Clipboard");
        //EMF 5/18/01: disable
        export.setEnabled(false);
	export.addActionListener(this);
	file.add(export);
	// JPW 4/19/2000: added "Export to DataTurbine"
	MenuItem copyToDT = new MenuItem("Export to DataTurbine");
        //EMF 5/18/01: disable
        copyToDT.setEnabled(false);
	copyToDT.addActionListener(this);
	file.add(copyToDT);
	MenuItem print = new MenuItem("Print");
	// EMF 4/28/99
	print.setEnabled(false); //printing broken until JDK1.1.7 is released
	print.addActionListener(this);
	file.add(print);
	file.addSeparator();
	MenuItem exit = new MenuItem("Exit");
	exit.addActionListener(this);
	file.add(exit);
	Menu mode = new Menu("Mode");
	ItemListener mil = new ModeItemListener(mode,loc);
	plot = new CheckboxMenuItem("Plot",true);
	plot.addItemListener(mil);
	mode.add(plot);
	table = new CheckboxMenuItem("Table",false);
	table.addItemListener(mil);
	mode.add(table);
        //EMF 1/26/01: added slave mode to menu
        ItemListener sil=new SlaveItemListener(mode,environment);
        slave = new CheckboxMenuItem("Slave",false);
        slave.addItemListener(sil);
        mode.addSeparator();
        mode.add(slave);
	// EMF 5/21/1999 : added channel menu with standard and metrics channels
	Menu view=new Menu("View");
	ItemListener vil = new ViewItemListener(view,loc);
	if (environment.REQUESTFILTER.equals(Connection.StandardChannels)) {
	    standard = new CheckboxMenuItem("Standard",true);
	}
	else standard = new CheckboxMenuItem("Standard",false);
	standard.addItemListener(vil);
	view.add(standard);
	if (environment.REQUESTFILTER.equals(Connection.MetricsChannels)) {
	    metrics = new CheckboxMenuItem("Metrics",true);
	}
	else metrics = new CheckboxMenuItem("Metrics",false);
	metrics.addItemListener(vil);
	view.add(metrics);
	if (environment.REQUESTFILTER.equals(Connection.AllChannels)) {
	    all = new CheckboxMenuItem("All",true);
	}
	else all = new CheckboxMenuItem("All",false);
	all.addItemListener(vil);
	view.add(all);
	// EMF 9/8/99: moved Refresh from File to View menu
	view.addSeparator();
	MenuItem refresh = new MenuItem("Refresh");
	refresh.addActionListener(this);
	view.add(refresh);
	//
	Menu help = new Menu("Help");
	MenuItem about = new MenuItem("About");
	about.addActionListener(this);
	help.add(about);
	//MenuItem onlineHelp = new MenuItem("OnLine Documentation");
	//onlineHelp.addActionListener(this);
	//help.add(onlineHelp);
	mb.add(file);
	mb.add(mode);
	mb.add(view);
	mb.add(help);
	mb.setHelpMenu(help);
	
	frame = new LWFrame("rbnbPlot by Creare");
	if (environment.HOST==null) frame.setTitle("rbnbPlot by Creare (no connection)");
	else {
	    frame.setTitle("rbnbPlot by Creare (connecting to "+environment.HOST+":"+
			   environment.PORT+"...)");
	    //start thread to listen for response to open request
	    if (runner==null || !runner.isAlive()) {
		runner=new Thread(this);
		runner.start();
	    }
	}
	frame.addNotify();
	frame.setLocation(getFrameLocation());
	frame.setSize(getFrameSize());
	frame.addWindowListener(new CloseClass());
	frame.setMenuBar(mb);
	frame.setLayout(new BorderLayout());
	
	pc = new PlotsContainer(rbc,pdc,environment);
	rbnbInterface=new RBNBInterface(this,pc,rmc,loc,rbc,pdc,cc,environment);
	uc = new UserControl(frame,rmc,loc,rbc,pdc,environment);
	Thread rbnbThread = new Thread(rbnbInterface,"rbnbThread");
	rbnbThread.start();
	
	frame.add(uc,"North");
	frame.add(pc,"Center");
	frame.validate();
	frame.show();
    }
	
// disableViewMenu method - called by RBNBInterface when connected to older RBNB
    public void disableViewMenu() {
	synchronized(this) {
	    standard.setState(false);
	    standard.setEnabled(false);
	    metrics.setState(false);
	    metrics.setEnabled(false);
	    all.setState(true);
	    environment.REQUESTFILTER=Connection.AllChannels;
	}
    }

// enableViewMenu method - called when opening new RBNB connection
    public void enableViewMenu() {
	synchronized(this) {
	    standard.setEnabled(true);
	    metrics.setEnabled(true);
	}
    }
    
// destroy method - called by browser on shutdown, by this on windowclose
    public void destroy() {

	if (rmc != null) {
	    rmc.set(RunModeDefs.quit,true);
	    rmc = null;
	}
	if (uc!=null) {
	    uc.clearChannelDialog();
	    uc=null;
	}
	if (frame != null) {
	    frame.setVisible(false);
	    // JPW/EMF 5/4/2001:
	    // This call hangs up for some reason; take it out
	    // frame.dispose();
	    frame = null;
	}

    }
    
    public void quitApp() {
	
        destroy();
	
	if (applicationRun) {
	    //delay to be sure RBNB has disconnected
	    try {
		Thread.sleep(2000);
	    }
	    catch (InterruptedException e) {
		System.err.println("thread sleep error: "+e);
	    }
	    RBNBProcess.exit(0,target);
	}
	else { //set cursor back to hand
	    setCursor(hand);
	}
    }
    
//printScreen method - creates new graphic, redraws everything, and dumps to printer
    public  void printScreen() {
	Toolkit tk=Toolkit.getDefaultToolkit();
	String pjTitle = new String("rbnbPlot print job");
	PrintJob pj=tk.getPrintJob(frame,pjTitle,new Properties());
	if (pj!=null) {
	    Graphics pg=pj.getGraphics();
	    if (pg!=null) {
		frame.printAll(pg);
		pg.dispose();
	    }
	    else System.err.println("RBNBPlot.printScreen: print graphics is null!");
	    pj.end();
	}
	else System.err.println("RBNBPlot.printScreen: print job is null");
    }
    
//run method - started when waiting for a new connection to be established, dies
//when connection succeeds or fails
    public void run() {
	int count=0;
	Boolean status = null;
	while ((status=loc.getStatus())==null) {
	    if (count++ > 600) {
		status=new Boolean(false);
		break;
	    }
	    try {
		Thread.sleep(100);
	    }
	    catch (InterruptedException ie) {}
	}
	if (status.booleanValue()==true) {
	    frame.setTitle("rbnbPlot by Creare (connected to "+environment.HOST+":"+
			   environment.PORT+")");
	}
	else {
	    String[] aboutInfo=new String[2];
	    aboutInfo[0]=new String("Failed to connect to");
	    aboutInfo[1]=new String(environment.HOST+":"+environment.PORT);
	    InfoDialog id=new InfoDialog(frame,true,"Error",aboutInfo);
	    id.show();
	    id.dispose();
	    frame.setTitle("rbnbPlot by Creare (no connection)");
	}
	frame.setCursor(pointer);
    }
    
// ModeItemListener class catches Mode Menu events, implements mutually
// exclusive selection of mode options
    class ModeItemListener implements ItemListener {
	Menu mode = null;
	LayoutCubby loc = null;
	
	ModeItemListener(Menu m, LayoutCubby l) {
	    mode=m;
	    loc=l;
	}
	
	public void itemStateChanged(ItemEvent e) {
	    if (e.getSource() instanceof CheckboxMenuItem) {
		CheckboxMenuItem cbmi = (CheckboxMenuItem)e.getSource();
		for (int i=0;i<2;i++) {
		    CheckboxMenuItem item=(CheckboxMenuItem)mode.getItem(i);
		    if (cbmi==item) {
			item.setState(true);
			if (item.getLabel().equals("Plot")) {
			    loc.set(LayoutCubby.PlotMode);
			}
			else if (item.getLabel().equals("Table")) {
			    loc.set(LayoutCubby.TableMode);
			}
		    }
		    else item.setState(false);
		}
	    }
	}
    }   

// EMF 1/26/01 added callback
// SlaveItemListener class catches Slave Mode menu events, toggles state
  class SlaveItemListener implements ItemListener {
    Menu mode=null;
    Environment env=null;
    boolean streamingStart=false;

    SlaveItemListener(Menu m, Environment e) {
      mode=m;
      env=e;
      streamingStart=env.STREAMING;
    }

    public void itemStateChanged(ItemEvent e) {
      CheckboxMenuItem cbmi= (CheckboxMenuItem)e.getSource();
      env.SLAVEMODE=cbmi.getState();
      if (env.SLAVEMODE) {
        env.STREAMING=true;
        rmc.set(RunModeDefs.realTime,true);
      }
      else env.STREAMING=streamingStart;
    }
  }
    
// ViewItemListener class catches View Menu events, sets appropriate
//  channel filter constant in environment class, then forces a RBNB Refresh
    class ViewItemListener implements ItemListener {
	Menu view = null;
	LayoutCubby layoutCubby=null;
	
	ViewItemListener(Menu v,LayoutCubby loc) {
	    view=v;
	    layoutCubby=loc;
	}
	
	public void itemStateChanged(ItemEvent e) {		
	    if (e.getSource() instanceof CheckboxMenuItem) {
		CheckboxMenuItem cbmi = (CheckboxMenuItem)e.getSource();
		int count=view.getItemCount();
		for (int i=0;i<count;i++) {
		    if (view.getItem(i) instanceof CheckboxMenuItem) {
			CheckboxMenuItem item=(CheckboxMenuItem)view.getItem(i);
			if (item==cbmi) {
			    if (item.getState()==false) { //ignore if user turned off item that was on
				item.setState(true);
				return;
			    }
			    else if (item.getLabel().equals("Standard")) {
				environment.REQUESTFILTER=Connection.StandardChannels;
			    }
			    else if (item.getLabel().equals("Metrics")) {
				environment.REQUESTFILTER=Connection.MetricsChannels;
			    }
			    else if (item.getLabel().equals("All")) {
				environment.REQUESTFILTER=Connection.AllChannels;
			    }
			}
			else item.setState(false);
		    }
		}
		loc.set(LayoutCubby.RefreshRBNB);	//force update of channels
	    }
	}
    }   
		
			
// CloseClass class catches window events, allows user to close window and
// terminate applet/application
    class CloseClass extends WindowAdapter {
	public void windowClosing(WindowEvent evt) {
	    //System.err.println("shutting down RBNBPlot");
	    destroy();
	    quitApp();
	}
    }
    
// LWFrame class provides lightweight frame for graphical output
    class LWFrame extends Frame {
	public LWFrame(String title) {
	    super(title);
	}
	// update method overridden to avoid screen flashing,
	// requires use of double buffering
	public void update(Graphics g) {
	    paint(g);
	}
    }
    
// start method overridden - want to continue running as user continues
// browsing
    public void start() {
    }

// main method - creates frame, then runs as applet
    public static void main(String[] args) {
	new AppletFrame(new RBNBPlotMain(args), 300, 300, false);
    }

// getFrameSize method - returns desired main frame size in
// screen coordinates
    private Dimension getFrameSize() {
	Toolkit tk = Toolkit.getDefaultToolkit();
	Dimension sz = tk.getScreenSize();
	//System.err.println("RBNBPlot.getFrameSize: Screensize "+sz.width+"   "
	//   +sz.height);
	sz.width /= 2;
	sz.height = sz.height*3/4;
	return(sz);
    }

// getFrameLocation method - returns desired main frame location
// in screen coordinates
    private Point getFrameLocation() {
	if (environment.POSITION_X==-1 || environment.POSITION_Y==-1) {
	    Toolkit tk = Toolkit.getDefaultToolkit();
	    Dimension sz = tk.getScreenSize();
	    return(new Point(sz.width/4,sz.height/8));
	}
	else return(new Point(environment.POSITION_X,environment.POSITION_Y));
    }
    
} // end class RBNBPlot
